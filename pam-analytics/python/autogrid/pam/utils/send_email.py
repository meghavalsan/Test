"""Prediction and Alert module.

The :mod:`autogrid.pam.alert` module generated predictions and issues alerts
based on anomalies generated by the :mod:`autogrid.pam.anomaly` module.
"""

# Copyright (c) 2011-2015 AutoGrid Systems
# Author(s): 'Trevor Stephens' <trevor.stephens@auto-grid.com>

import sendgrid
import smtplib
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
from email.mime.multipart import MIMEMultipart


def send_email(to_email, from_email, subject, text=None, html=None,
               attachment=None, filename=None,
               method='sendgrid', api_key=None, server=None, port=None):
    """Create an email for each alert generated.

    Parameters
    ----------
    to_email : list of str
        The email addresses to send the messages to.

    from_email : str
        The email address to send the messages from.

    subject : str
        The subject line for the email.

    text : str or None, optional (default=None)
        Plain text for email body.

    html : str or None, optional (default=None)
        HTML-formatted text for email body.

    attachment : str or None, optional (default=None)
        The contents of a file attachment.

    filename : str or None, optional (default=None)
        The filename of a file attachment.

    method : str, optional (default='sendgrid')
        The method by which to send the email. Either 'sendgrid' or 'smarthost'.

    api_key : str or None, optional (default=None)
        The API key for sendgrid service. Only used when `method` is 'sendgrid'.

    server : str or None, optional (default=None)
        The address of the smarthost. Only used when `method` is 'smarthost'.

    port : int or None, optional (default=None)
        The port of the smarthost. Only used when `method` is 'smarthost'.

    Returns
    -------
    results : tuple
        The results of the attempt to email of form (status, msg)
    """
    if text is None and html is None:
        raise ValueError("Must specify one of `html` or `text`")
    if method == 'sendgrid':
        if api_key is None:
            raise ValueError("`api_key` must be specified for `method` 'sendgrid'")
        sg = sendgrid.SendGridClient(api_key)
        if html is not None:
            message = sendgrid.Mail(to=to_email,
                                    subject=subject,
                                    html=html,
                                    from_email=from_email)
        elif text is not None:
            message = sendgrid.Mail(to=to_email,
                                    subject=subject,
                                    text=text,
                                    from_email=from_email)
        if attachment is not None:
            message.add_attachment_stream(filename, attachment)
        status, msg = sg.send(message)

    elif method == 'smarthost':
        if server is None:
            raise ValueError("`server` must be specified for `method` 'smarthost'")
        if port is None:
            raise ValueError("`port` must be specified for `method` 'smarthost'")
        msg = MIMEMultipart()
        msg['Subject'] = subject
        msg['From'] = from_email
        msg['To'] = ", ".join(to_email)
        if html is not None:
            msg.attach(MIMEText(html, 'html'))
        elif text is not None:
            msg.attach(MIMEText(text, 'plain'))
        if attachment is not None:
            content_disposition = 'attachment; filename="%s"' % filename
            msg.attach(MIMEApplication(attachment,
                                       Content_Disposition=content_disposition,
                                       Name=filename))
        s = smtplib.SMTP(server, port=port)
        s.sendmail(from_email, to_email, msg.as_string())
        s.quit()
        # TODO : Investigate exception types from smtplib.
        status, msg = 200, '{"message":"success"}'

    else:
        raise ValueError("Unknown `method`: %s" % method)

    return status, msg
