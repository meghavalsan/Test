"""Prediction and Alert module.

The :mod:`autogrid.pam.alert` module generated predictions and issues alerts
based on anomalies generated by the :mod:`autogrid.pam.anomaly` module.
"""

# Copyright (c) 2011-2015 AutoGrid Systems
# Author(s): 'Trevor Stephens' <trevor.stephens@auto-grid.com>

import json
import pandas as pd
from datetime import datetime
from pytz import UTC
from .send_email import send_email


DAY = pd.Timedelta(days=1)


def send_alert(tenant_tz, alert, to_email, from_email,
               method='sendgrid', api_key=None, server=None, port=None):
    """Create an email for each alert generated.

    Parameters
    ----------
    tenant_tz : pytz.timezone
        Timezone of tenant

    alert : fitted AlertGenerator object.
        The alerts generated from the anomalies.

    to_email : list of str
        The email addresses to send the messages to.

    from_email : str
        The email address to send the messages from.

    method : str, optional (default='sendgrid')
        The method by which to send the email. Either 'sendgrid' or 'smarthost'.

    api_key : str or None, optional (default=None)
        The API key for sendgrid service. Only used when `method` is 'sendgrid'.

    server : str or None, optional (default=None)
        The address of the smarthost. Only used when `method` is 'smarthost'.

    port : int or None, optional (default=None)
        The port of the smarthost. Only used when `method` is 'smarthost'.

    Returns
    -------
    results : tuple
        The results of the attempt to email of form (status, msg)
    """
    alert_html = alert.to_html()
    alert_dict = alert.to_dict()

    alert_time_local = datetime.strptime(alert_dict['alert_time_utc'],
                                         '%Y-%m-%dT%H:%M:%SZ')
    alert_time_local = tenant_tz.normalize(UTC.localize(alert_time_local))

    subject = "NextAlert %s Alert! Feeder %s, %s" % (alert_dict['alert_type'],
                                                     alert_dict['feeder_id'],
                                                     alert_time_local)
    subject = subject.replace('-05:00', ' EST').replace('-04:00', ' EDT')

    json_name = '%s_%s.json' % (alert_dict['alert_time_utc'],
                                alert_dict['feeder_id'])
    json_name = json_name.replace(':', '_')
    json_blob = json.dumps(alert_dict, indent=1)

    status, msg = send_email(to_email=to_email,
                             from_email=from_email,
                             subject=subject,
                             html=alert_html,
                             attachment=json_blob,
                             filename=json_name,
                             method=method,
                             api_key=api_key,
                             server=server,
                             port=port)

    return status, msg
